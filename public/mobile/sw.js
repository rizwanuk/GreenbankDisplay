/**
 * Greenbank Mobile PWA Service Worker
 * Scope: /mobile/
 * (push removed; supports manual update via SKIP_WAITING)
 */
const CACHE = "gbm-mobile-v8";
const PRECACHE = ["/mobile/","/mobile/index.html","/mobile/manifest.webmanifest","/mobile/icons/icon-192.png","/mobile/icons/icon-512.png"];
self.addEventListener("install",(event)=>{event.waitUntil(caches.open(CACHE).then(c=>c.addAll(PRECACHE)).catch(()=>{}).then(()=>self.skipWaiting()))});
self.addEventListener("activate",(event)=>{event.waitUntil((async()=>{try{if(self.registration.navigationPreload){await self.registration.navigationPreload.enable();}}catch{}const keys=await caches.keys();await Promise.all(keys.filter(k=>k!==CACHE).map(k=>caches.delete(k)));await self.clients.claim();})())});
self.addEventListener("fetch",(event)=>{const req=event.request,url=new URL(req.url);const inScope=(self.registration.scope&&url.href.startsWith(self.registration.scope))||url.origin===location.origin;if(!inScope) return;const method=req.method||"GET",isGET=method==="GET",isDoc=req.mode==="navigate"||req.headers.get("accept")?.includes("text/html"),isStatic=/\.(?:css|js|png|jpg|jpeg|webp|svg|ico|woff2?|ttf|otf)$/.test(url.pathname),isAPI=url.pathname.startsWith("/api/");if(isAPI){event.respondWith(fetch(req));return;}if(!isGET){event.respondWith(fetch(req));return;}if(isDoc){event.respondWith((async()=>{try{const res=await fetch(new Request(req,{cache:"no-store"}));if(res&&res.ok){const copy=res.clone();caches.open(CACHE).then(c=>c.put(req,copy)).catch(()=>{});}return res;}catch{const cached=await caches.match(req);return cached||new Response("Offline",{status:503,statusText:"Offline"});}})());return;}if(isStatic){event.respondWith(caches.match(req).then(cached=>{const fetched=fetch(req).then(res=>{if(res&&res.ok){const copy=res.clone();caches.open(CACHE).then(c=>c.put(req,copy)).catch(()=>{});}return res;}).catch(()=>cached);return cached||fetched;}));return;}event.respondWith(caches.match(req).then(cached=>cached||fetch(req)));});
self.addEventListener("message",(event)=>{const msg=event?.data;if(msg==="SKIP_WAITING"||(msg&&msg.type==="SKIP_WAITING")){self.skipWaiting();}if(msg&&msg.type==="CLEAR_CACHES"){event.waitUntil(caches.keys().then(keys=>Promise.all(keys.map(k=>caches.delete(k)))));}});
